
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 28 00:58:51 EST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Mon Nov 28 00:58:51 EST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\003\007\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\002" +
    "\000\002\006\004\000\002\006\002\000\002\007\003\000" +
    "\002\007\002\000\002\010\013\000\002\010\014\000\002" +
    "\010\013\000\002\010\014\000\002\011\005\000\002\011" +
    "\003\000\002\012\004\000\002\012\006\000\002\013\005" +
    "\000\002\013\007\000\002\013\010\000\002\013\007\000" +
    "\002\014\004\000\002\014\003\000\002\015\006\000\002" +
    "\015\010\000\002\015\010\000\002\015\012\000\002\015" +
    "\007\000\002\015\005\000\002\015\011\000\002\015\007" +
    "\000\002\015\006\000\002\015\011\000\002\015\007\000" +
    "\002\015\007\000\002\015\011\000\002\015\006\000\002" +
    "\015\007\000\002\015\004\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\007\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\022\003\000\002\031\013\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\004\000\002" +
    "\026\006\000\002\026\003\000\002\027\003\000\002\027" +
    "\005\000\002\027\006\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\012\005\001\002\000\004\002\354\001" +
    "\002\000\004\031\006\001\002\000\004\045\007\001\002" +
    "\000\020\005\014\007\021\010\010\013\013\017\012\022" +
    "\016\044\ufffa\001\002\000\006\031\uffd0\036\uffd0\001\002" +
    "\000\004\031\353\001\002\000\006\031\uffcf\036\uffcf\001" +
    "\002\000\004\031\347\001\002\000\006\031\uffce\036\uffce" +
    "\001\002\000\020\005\014\007\021\010\010\013\013\017" +
    "\012\022\016\044\ufffa\001\002\000\004\031\327\001\002" +
    "\000\004\044\326\001\002\000\004\044\ufffe\001\002\000" +
    "\006\031\uffd1\036\uffd1\001\002\000\016\005\014\007\021" +
    "\010\010\017\012\022\016\044\ufffa\001\002\000\004\031" +
    "\025\001\002\000\004\044\ufffb\001\002\000\004\037\026" +
    "\001\002\000\014\005\014\007\021\010\010\017\012\036" +
    "\030\001\002\000\004\036\320\001\002\000\004\045\040" +
    "\001\002\000\004\031\035\001\002\000\006\036\ufff2\042" +
    "\033\001\002\000\012\005\014\007\021\010\010\017\012" +
    "\001\002\000\004\036\ufff3\001\002\000\010\036\ufff1\042" +
    "\ufff1\053\036\001\002\000\004\054\037\001\002\000\006" +
    "\036\ufff0\042\ufff0\001\002\000\042\004\ufffc\005\014\006" +
    "\ufffc\007\021\010\010\011\ufffc\013\013\014\ufffc\017\012" +
    "\020\ufffc\023\ufffc\024\ufffc\031\ufffc\045\ufffc\061\ufffc\062" +
    "\ufffc\001\002\000\042\004\ufffc\005\014\006\ufffc\007\021" +
    "\010\010\011\ufffc\013\013\014\ufffc\017\012\020\ufffc\023" +
    "\ufffc\024\ufffc\031\ufffc\045\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\030\004\161\006\156\011\157\014\167\020\162\023" +
    "\171\024\164\031\166\045\160\061\170\062\173\001\002" +
    "\000\004\031\044\001\002\000\010\034\045\050\047\053" +
    "\046\001\002\000\046\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\013\uffef\014\uffef\017\uffef\020\uffef\022" +
    "\uffef\023\uffef\024\uffef\031\uffef\044\uffef\045\uffef\061\uffef" +
    "\062\uffef\001\002\000\004\025\153\001\002\000\024\016" +
    "\062\021\057\025\054\026\066\027\055\030\064\031\065" +
    "\037\070\040\067\001\002\000\050\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\043\uffb6\046\uffb6" +
    "\047\uffb6\051\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\050\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000" +
    "\010\034\152\046\101\055\077\001\002\000\050\032\uffb9" +
    "\033\uffb9\034\uffb9\035\137\036\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\046\uffb9\047\uffb9\051\140\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000" +
    "\050\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\046\uffaf\047\uffaf\051\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\001\002\000\050\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\041\uffac\042\uffac\043\uffac\046\uffac\047\uffac\051\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\064\uffac\065" +
    "\uffac\066\uffac\001\002\000\024\034\uffc4\036\uffc4\042\uffc4" +
    "\046\uffc4\054\uffc4\055\uffc4\064\uffc4\065\uffc4\066\uffc4\001" +
    "\002\000\050\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\041\uffab\042\uffab\043\uffab\046\uffab\047\uffab\051\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab\065\uffab" +
    "\066\uffab\001\002\000\050\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\041\uffb2\042\uffb2\043\uffb2\046\uffb2\047\uffb2" +
    "\051\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\001\002\000\024\034\uffc5\036\uffc5" +
    "\042\uffc5\046\uffc5\054\uffc5\055\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\001\002\000\050\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\041\uffaa\042\uffaa\043\uffaa\046\uffaa\047\uffaa\051" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\001\002\000\044\032\132\033\134\034" +
    "\uffbc\036\uffbc\041\127\042\uffbc\043\131\046\uffbc\047\126" +
    "\054\uffbc\055\uffbc\056\133\057\130\060\135\064\uffbc\065" +
    "\uffbc\066\uffbc\001\002\000\050\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\041\uffae\042\uffae\043\uffae\046\uffae\047" +
    "\uffae\051\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\064\uffae\065\uffae\066\uffae\001\002\000\054\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\114\041\uffa8\042\uffa8" +
    "\043\uffa8\046\uffa8\047\uffa8\051\uffa8\053\115\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\001\002\000\050\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\041\uffad\042\uffad\043\uffad\046\uffad\047\uffad\051\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\064\uffad\065" +
    "\uffad\066\uffad\001\002\000\024\016\062\021\057\025\054" +
    "\026\066\027\055\030\064\031\065\037\075\040\067\001" +
    "\002\000\034\005\014\007\021\010\010\016\062\017\012" +
    "\021\057\025\054\026\066\027\055\030\064\031\065\037" +
    "\070\040\067\001\002\000\012\036\100\046\101\055\077" +
    "\064\104\001\002\000\004\036\073\001\002\000\024\016" +
    "\062\021\057\025\054\026\066\027\055\030\064\031\065" +
    "\037\075\040\067\001\002\000\050\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\041\uffb4\042\uffb4\043\uffb4\046\uffb4" +
    "\047\uffb4\051\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000\034\005\014" +
    "\007\021\010\010\016\062\017\012\021\057\025\054\026" +
    "\066\027\055\030\064\031\065\037\070\040\067\001\002" +
    "\000\010\036\100\046\101\055\077\001\002\000\024\016" +
    "\062\021\057\025\054\026\066\027\055\030\064\031\065" +
    "\037\075\040\067\001\002\000\050\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9\043\uffa9\046\uffa9" +
    "\047\uffa9\051\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002\000\024\016\062" +
    "\021\057\025\054\026\066\027\055\030\064\031\065\037" +
    "\075\040\067\001\002\000\024\034\uffc7\036\uffc7\042\uffc7" +
    "\046\uffc7\054\uffc7\055\uffc7\064\uffc7\065\uffc7\066\uffc7\001" +
    "\002\000\024\034\uffc6\036\uffc6\042\uffc6\046\uffc6\054\uffc6" +
    "\055\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002\000\024\016" +
    "\062\021\057\025\054\026\066\027\055\030\064\031\065" +
    "\037\070\040\067\001\002\000\010\046\101\055\077\065" +
    "\106\001\002\000\024\016\062\021\057\025\054\026\066" +
    "\027\055\030\064\031\065\037\070\040\067\001\002\000" +
    "\010\046\101\055\077\066\110\001\002\000\024\016\062" +
    "\021\057\025\054\026\066\027\055\030\064\031\065\037" +
    "\070\040\067\001\002\000\010\036\112\046\101\055\077" +
    "\001\002\000\052\004\uffc3\006\uffc3\011\uffc3\014\uffc3\020" +
    "\uffc3\023\uffc3\024\uffc3\031\uffc3\034\uffc3\036\uffc3\042\uffc3" +
    "\045\uffc3\046\uffc3\054\uffc3\055\uffc3\061\uffc3\062\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\001\002\000\050\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\041\uffb5\042\uffb5\043\uffb5\046" +
    "\uffb5\047\uffb5\051\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\026\016" +
    "\062\021\057\025\054\026\066\027\055\030\064\031\065" +
    "\036\120\037\070\040\067\001\002\000\024\016\062\021" +
    "\057\025\054\026\066\027\055\030\064\031\065\037\070" +
    "\040\067\001\002\000\010\046\101\054\117\055\077\001" +
    "\002\000\052\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\001\002\000\050\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\041\uffb1\042\uffb1\043\uffb1\046\uffb1" +
    "\047\uffb1\051\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000\004\036\125" +
    "\001\002\000\012\036\uffcc\042\123\046\101\055\077\001" +
    "\002\000\024\016\062\021\057\025\054\026\066\027\055" +
    "\030\064\031\065\037\070\040\067\001\002\000\004\036" +
    "\uffcd\001\002\000\050\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\041\uffb0\042\uffb0\043\uffb0\046\uffb0\047\uffb0\051" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\001\002\000\024\016\062\021\057\025" +
    "\054\026\066\027\055\030\064\031\065\037\075\040\067" +
    "\001\002\000\024\016\062\021\057\025\054\026\066\027" +
    "\055\030\064\031\065\037\075\040\067\001\002\000\024" +
    "\016\062\021\057\025\054\026\066\027\055\030\064\031" +
    "\065\037\075\040\067\001\002\000\024\016\062\021\057" +
    "\025\054\026\066\027\055\030\064\031\065\037\075\040" +
    "\067\001\002\000\024\016\062\021\057\025\054\026\066" +
    "\027\055\030\064\031\065\037\075\040\067\001\002\000" +
    "\024\016\062\021\057\025\054\026\066\027\055\030\064" +
    "\031\065\037\075\040\067\001\002\000\024\016\062\021" +
    "\057\025\054\026\066\027\055\030\064\031\065\037\075" +
    "\040\067\001\002\000\024\016\062\021\057\025\054\026" +
    "\066\027\055\030\064\031\065\037\075\040\067\001\002" +
    "\000\050\032\uffba\033\uffba\034\uffba\035\137\036\uffba\041" +
    "\uffba\042\uffba\043\uffba\046\uffba\047\uffba\051\140\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\064\uffba\065\uffba\066" +
    "\uffba\001\002\000\024\016\062\021\057\025\054\026\066" +
    "\027\055\030\064\031\065\037\075\040\067\001\002\000" +
    "\024\016\062\021\057\025\054\026\066\027\055\030\064" +
    "\031\065\037\075\040\067\001\002\000\050\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\046\uffb8\047\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\050" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\046\uffb7\047\uffb7\051\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\064\uffb7\065\uffb7\066\uffb7\001" +
    "\002\000\030\032\132\034\uffbd\036\uffbd\042\uffbd\046\uffbd" +
    "\054\uffbd\055\uffbd\060\135\064\uffbd\065\uffbd\066\uffbd\001" +
    "\002\000\030\032\132\034\uffc0\036\uffc0\042\uffc0\046\uffc0" +
    "\054\uffc0\055\uffc0\060\135\064\uffc0\065\uffc0\066\uffc0\001" +
    "\002\000\050\032\uffbb\033\uffbb\034\uffbb\035\137\036\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\046\uffbb\047\uffbb\051\140\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\001\002\000\030\032\132\034\uffbf\036\uffbf\042" +
    "\uffbf\046\uffbf\054\uffbf\055\uffbf\060\135\064\uffbf\065\uffbf" +
    "\066\uffbf\001\002\000\030\032\132\034\uffc1\036\uffc1\042" +
    "\uffc1\046\uffc1\054\uffc1\055\uffc1\060\135\064\uffc1\065\uffc1" +
    "\066\uffc1\001\002\000\030\032\132\034\uffc2\036\uffc2\042" +
    "\uffc2\046\uffc2\054\uffc2\055\uffc2\060\135\064\uffc2\065\uffc2" +
    "\066\uffc2\001\002\000\030\032\132\034\uffbe\036\uffbe\042" +
    "\uffbe\046\uffbe\054\uffbe\055\uffbe\060\135\064\uffbe\065\uffbe" +
    "\066\uffbe\001\002\000\046\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\013\uffee\014\uffee\017\uffee\020\uffee" +
    "\022\uffee\023\uffee\024\uffee\031\uffee\044\uffee\045\uffee\061" +
    "\uffee\062\uffee\001\002\000\004\054\154\001\002\000\004" +
    "\034\155\001\002\000\046\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\013\uffed\014\uffed\017\uffed\020\uffed" +
    "\022\uffed\023\uffed\024\uffed\031\uffed\044\uffed\045\uffed\061" +
    "\uffed\062\uffed\001\002\000\004\031\315\001\002\000\004" +
    "\037\301\001\002\000\042\004\ufffc\005\014\006\ufffc\007" +
    "\021\010\010\011\ufffc\013\013\014\ufffc\017\012\020\ufffc" +
    "\023\ufffc\024\ufffc\031\ufffc\045\ufffc\061\ufffc\062\ufffc\001" +
    "\002\000\004\037\260\001\002\000\026\016\062\021\057" +
    "\025\054\026\066\027\055\030\064\031\065\034\254\037" +
    "\070\040\067\001\002\000\004\050\251\001\002\000\004" +
    "\037\244\001\002\000\036\004\161\006\156\011\157\014" +
    "\167\015\uffea\020\162\023\171\024\164\031\166\044\uffea" +
    "\045\160\061\170\062\173\063\uffea\001\002\000\016\037" +
    "\223\050\uffa8\052\221\053\115\061\220\062\222\001\002" +
    "\000\004\031\216\001\002\000\004\031\214\001\002\000" +
    "\004\037\201\001\002\000\004\044\176\001\002\000\004" +
    "\031\174\001\002\000\004\034\175\001\002\000\036\004" +
    "\uffd3\006\uffd3\011\uffd3\014\uffd3\015\uffd3\020\uffd3\023\uffd3" +
    "\024\uffd3\031\uffd3\044\uffd3\045\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\001\002\000\020\005\ufff8\007\ufff8\010\ufff8\017\ufff8" +
    "\022\ufff8\034\200\044\ufff8\001\002\000\016\005\ufff5\007" +
    "\ufff5\010\ufff5\017\ufff5\022\ufff5\044\ufff5\001\002\000\050" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\014" +
    "\ufff9\015\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\031\ufff9\044\ufff9\045\ufff9\061\ufff9\062\ufff9\063\ufff9\001" +
    "\002\000\024\016\062\021\057\025\054\026\066\027\055" +
    "\030\064\031\065\037\070\040\067\001\002\000\012\036" +
    "\204\042\203\046\101\055\077\001\002\000\024\016\062" +
    "\021\057\025\054\026\066\027\055\030\064\031\065\037" +
    "\070\040\067\001\002\000\004\034\205\001\002\000\036" +
    "\004\uffde\006\uffde\011\uffde\014\uffde\015\uffde\020\uffde\023" +
    "\uffde\024\uffde\031\uffde\044\uffde\045\uffde\061\uffde\062\uffde" +
    "\063\uffde\001\002\000\004\036\212\001\002\000\012\036" +
    "\uffc8\042\210\046\101\055\077\001\002\000\024\016\062" +
    "\021\057\025\054\026\066\027\055\030\064\031\065\037" +
    "\070\040\067\001\002\000\004\036\uffc9\001\002\000\004" +
    "\034\213\001\002\000\036\004\uffdd\006\uffdd\011\uffdd\014" +
    "\uffdd\015\uffdd\020\uffdd\023\uffdd\024\uffdd\031\uffdd\044\uffdd" +
    "\045\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\004\034" +
    "\215\001\002\000\036\004\uffd5\006\uffd5\011\uffd5\014\uffd5" +
    "\015\uffd5\020\uffd5\023\uffd5\024\uffd5\031\uffd5\044\uffd5\045" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\001\002\000\004\034\217" +
    "\001\002\000\036\004\uffd7\006\uffd7\011\uffd7\014\uffd7\015" +
    "\uffd7\020\uffd7\023\uffd7\024\uffd7\031\uffd7\044\uffd7\045\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\001\002\000\004\034\241\001" +
    "\002\000\004\024\232\001\002\000\004\034\231\001\002" +
    "\000\026\016\062\021\057\025\054\026\066\027\055\030" +
    "\064\031\065\036\224\037\070\040\067\001\002\000\004" +
    "\034\230\001\002\000\004\036\226\001\002\000\004\034" +
    "\227\001\002\000\036\004\uffdb\006\uffdb\011\uffdb\014\uffdb" +
    "\015\uffdb\020\uffdb\023\uffdb\024\uffdb\031\uffdb\044\uffdb\045" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\001\002\000\036\004\uffdc" +
    "\006\uffdc\011\uffdc\014\uffdc\015\uffdc\020\uffdc\023\uffdc\024" +
    "\uffdc\031\uffdc\044\uffdc\045\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\001\002\000\036\004\uffd2\006\uffd2\011\uffd2\014\uffd2\015" +
    "\uffd2\020\uffd2\023\uffd2\024\uffd2\031\uffd2\044\uffd2\045\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\001\002\000\004\037\234\001" +
    "\002\000\030\004\161\006\156\011\157\014\167\020\162" +
    "\023\171\024\164\031\166\045\160\061\170\062\173\001" +
    "\002\000\024\016\062\021\057\025\054\026\066\027\055" +
    "\030\064\031\065\037\070\040\067\001\002\000\012\036" +
    "\236\046\101\055\077\064\104\001\002\000\030\004\161" +
    "\006\156\011\157\014\167\020\162\023\171\024\164\031" +
    "\166\045\160\061\170\062\173\001\002\000\036\004\uffe3" +
    "\006\uffe3\011\uffe3\014\uffe3\015\uffe3\020\uffe3\023\uffe3\024" +
    "\uffe3\031\uffe3\044\uffe3\045\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\001\002\000\036\004\uffe2\006\uffe2\011\uffe2\014\uffe2\015" +
    "\uffe2\020\uffe2\023\uffe2\024\uffe2\031\uffe2\044\uffe2\045\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\001\002\000\036\004\uffd4\006" +
    "\uffd4\011\uffd4\014\uffd4\015\uffd4\020\uffd4\023\uffd4\024\uffd4" +
    "\031\uffd4\044\uffd4\045\uffd4\061\uffd4\062\uffd4\063\uffd4\001" +
    "\002\000\010\015\uffeb\044\uffeb\063\uffeb\001\002\000\030" +
    "\004\161\006\156\011\157\014\167\020\162\023\171\024" +
    "\164\031\166\045\160\061\170\062\173\001\002\000\024" +
    "\016\062\021\057\025\054\026\066\027\055\030\064\031" +
    "\065\037\070\040\067\001\002\000\012\036\246\046\101" +
    "\055\077\064\104\001\002\000\030\004\161\006\156\011" +
    "\157\014\167\020\162\023\171\024\164\031\166\045\160" +
    "\061\170\062\173\001\002\000\036\004\uffe5\006\uffe5\011" +
    "\uffe5\014\uffe5\015\uffe5\020\uffe5\023\uffe5\024\uffe5\031\uffe5" +
    "\044\uffe5\045\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000" +
    "\036\004\uffe4\006\uffe4\011\uffe4\014\uffe4\015\uffe4\020\uffe4" +
    "\023\uffe4\024\uffe4\031\uffe4\044\uffe4\045\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\001\002\000\024\016\062\021\057\025\054" +
    "\026\066\027\055\030\064\031\065\037\070\040\067\001" +
    "\002\000\010\034\253\046\101\055\077\001\002\000\036" +
    "\004\uffe1\006\uffe1\011\uffe1\014\uffe1\015\uffe1\020\uffe1\023" +
    "\uffe1\024\uffe1\031\uffe1\044\uffe1\045\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\001\002\000\036\004\uffda\006\uffda\011\uffda\014" +
    "\uffda\015\uffda\020\uffda\023\uffda\024\uffda\031\uffda\044\uffda" +
    "\045\uffda\061\uffda\062\uffda\063\uffda\001\002\000\010\034" +
    "\256\046\101\055\077\001\002\000\036\004\uffd9\006\uffd9" +
    "\011\uffd9\014\uffd9\015\uffd9\020\uffd9\023\uffd9\024\uffd9\031" +
    "\uffd9\044\uffd9\045\uffd9\061\uffd9\062\uffd9\063\uffd9\001\002" +
    "\000\030\004\161\006\156\011\157\014\167\020\162\023" +
    "\171\024\164\031\166\045\160\061\170\062\173\001\002" +
    "\000\024\016\062\021\057\025\054\026\066\027\055\030" +
    "\064\031\065\037\070\040\067\001\002\000\012\036\262" +
    "\046\101\055\077\064\104\001\002\000\030\004\161\006" +
    "\156\011\157\014\167\020\162\023\171\024\164\031\166" +
    "\045\160\061\170\062\173\001\002\000\006\015\265\063" +
    "\264\001\002\000\036\004\uffe8\006\uffe8\011\uffe8\014\uffe8" +
    "\015\uffe8\020\uffe8\023\uffe8\024\uffe8\031\uffe8\044\uffe8\045" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000\030\004\161" +
    "\006\156\011\157\014\167\020\162\023\171\024\164\031" +
    "\166\045\160\061\170\062\173\001\002\000\004\063\267" +
    "\001\002\000\036\004\uffe6\006\uffe6\011\uffe6\014\uffe6\015" +
    "\uffe6\020\uffe6\023\uffe6\024\uffe6\031\uffe6\044\uffe6\045\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\001\002\000\006\015\272\063" +
    "\271\001\002\000\036\004\uffe9\006\uffe9\011\uffe9\014\uffe9" +
    "\015\uffe9\020\uffe9\023\uffe9\024\uffe9\031\uffe9\044\uffe9\045" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\001\002\000\030\004\161" +
    "\006\156\011\157\014\167\020\162\023\171\024\164\031" +
    "\166\045\160\061\170\062\173\001\002\000\004\063\274" +
    "\001\002\000\036\004\uffe7\006\uffe7\011\uffe7\014\uffe7\015" +
    "\uffe7\020\uffe7\023\uffe7\024\uffe7\031\uffe7\044\uffe7\045\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\001\002\000\030\004\161\006" +
    "\156\011\157\014\167\020\162\023\171\024\164\031\166" +
    "\045\160\061\170\062\173\001\002\000\004\044\277\001" +
    "\002\000\040\004\ufff8\006\ufff8\011\ufff8\014\ufff8\015\ufff8" +
    "\020\ufff8\023\ufff8\024\ufff8\031\ufff8\034\200\044\ufff8\045" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000\036\004\uffd6" +
    "\006\uffd6\011\uffd6\014\uffd6\015\uffd6\020\uffd6\023\uffd6\024" +
    "\uffd6\031\uffd6\044\uffd6\045\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\001\002\000\004\031\303\001\002\000\006\036\305\042" +
    "\304\001\002\000\010\036\uffa8\042\uffa8\053\115\001\002" +
    "\000\004\031\303\001\002\000\004\034\306\001\002\000" +
    "\036\004\uffdf\006\uffdf\011\uffdf\014\uffdf\015\uffdf\020\uffdf" +
    "\023\uffdf\024\uffdf\031\uffdf\044\uffdf\045\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\001\002\000\006\036\uffca\042\313\001\002" +
    "\000\004\036\311\001\002\000\004\034\312\001\002\000" +
    "\036\004\uffe0\006\uffe0\011\uffe0\014\uffe0\015\uffe0\020\uffe0" +
    "\023\uffe0\024\uffe0\031\uffe0\044\uffe0\045\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\001\002\000\004\031\303\001\002\000\004" +
    "\036\uffcb\001\002\000\004\034\316\001\002\000\036\004" +
    "\uffd8\006\uffd8\011\uffd8\014\uffd8\015\uffd8\020\uffd8\023\uffd8" +
    "\024\uffd8\031\uffd8\044\uffd8\045\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\001\002\000\030\004\ufffd\006\ufffd\011\ufffd\014\ufffd" +
    "\020\ufffd\023\ufffd\024\ufffd\031\ufffd\045\ufffd\061\ufffd\062" +
    "\ufffd\001\002\000\004\045\321\001\002\000\042\004\ufffc" +
    "\005\014\006\ufffc\007\021\010\010\011\ufffc\013\013\014" +
    "\ufffc\017\012\020\ufffc\023\ufffc\024\ufffc\031\ufffc\045\ufffc" +
    "\061\ufffc\062\ufffc\001\002\000\030\004\161\006\156\011" +
    "\157\014\167\020\162\023\171\024\164\031\166\045\160" +
    "\061\170\062\173\001\002\000\004\044\324\001\002\000" +
    "\020\005\ufff8\007\ufff8\010\ufff8\017\ufff8\022\ufff8\034\200" +
    "\044\ufff8\001\002\000\016\005\ufff4\007\ufff4\010\ufff4\017" +
    "\ufff4\022\ufff4\044\ufff4\001\002\000\004\002\000\001\002" +
    "\000\004\037\330\001\002\000\014\005\014\007\021\010" +
    "\010\017\012\036\332\001\002\000\004\036\340\001\002" +
    "\000\004\045\333\001\002\000\042\004\ufffc\005\014\006" +
    "\ufffc\007\021\010\010\011\ufffc\013\013\014\ufffc\017\012" +
    "\020\ufffc\023\ufffc\024\ufffc\031\ufffc\045\ufffc\061\ufffc\062" +
    "\ufffc\001\002\000\030\004\161\006\156\011\157\014\167" +
    "\020\162\023\171\024\164\031\166\045\160\061\170\062" +
    "\173\001\002\000\004\044\336\001\002\000\020\005\ufff8" +
    "\007\ufff8\010\ufff8\017\ufff8\022\ufff8\034\200\044\ufff8\001" +
    "\002\000\016\005\ufff7\007\ufff7\010\ufff7\017\ufff7\022\ufff7" +
    "\044\ufff7\001\002\000\004\045\341\001\002\000\042\004" +
    "\ufffc\005\014\006\ufffc\007\021\010\010\011\ufffc\013\013" +
    "\014\ufffc\017\012\020\ufffc\023\ufffc\024\ufffc\031\ufffc\045" +
    "\ufffc\061\ufffc\062\ufffc\001\002\000\030\004\161\006\156" +
    "\011\157\014\167\020\162\023\171\024\164\031\166\045" +
    "\160\061\170\062\173\001\002\000\004\044\344\001\002" +
    "\000\020\005\ufff8\007\ufff8\010\ufff8\017\ufff8\022\ufff8\034" +
    "\200\044\ufff8\001\002\000\016\005\ufff6\007\ufff6\010\ufff6" +
    "\017\ufff6\022\ufff6\044\ufff6\001\002\000\004\044\uffff\001" +
    "\002\000\004\050\350\001\002\000\024\016\062\021\057" +
    "\025\054\026\066\027\055\030\064\031\065\037\070\040" +
    "\067\001\002\000\010\034\352\046\101\055\077\001\002" +
    "\000\046\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\017\uffec\020\uffec\022\uffec\023\uffec" +
    "\024\uffec\031\uffec\044\uffec\045\uffec\061\uffec\062\uffec\001" +
    "\002\000\012\034\045\037\026\050\047\053\046\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\016\006\017" +
    "\010\021\013\014\016\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\345\006\017\010\021\013\014\016" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\023\010\021\016" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\026\012\031\016\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\033\012\031\016\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\041\013\040\016\042\001\001\000" +
    "\010\005\316\013\040\016\042\001\001\000\010\014\171" +
    "\015\164\030\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\022\051" +
    "\023\060\024\062\025\052\026\047\027\050\030\057\031" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\112\027\050\030\057\001\001\000\024\016\071\022" +
    "\070\023\060\024\062\025\052\026\047\027\050\030\057" +
    "\031\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\073\027\050\030\057\001\001\000\002\001\001" +
    "\000\024\016\071\022\075\023\060\024\062\025\052\026" +
    "\047\027\050\030\057\031\055\001\001\000\002\001\001" +
    "\000\016\023\102\024\062\025\052\026\047\027\050\030" +
    "\057\001\001\000\002\001\001\000\016\023\101\024\062" +
    "\025\052\026\047\027\050\030\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\022\104\023\060\024\062" +
    "\025\052\026\047\027\050\030\057\031\055\001\001\000" +
    "\002\001\001\000\022\022\106\023\060\024\062\025\052" +
    "\026\047\027\050\030\057\031\055\001\001\000\002\001" +
    "\001\000\022\022\110\023\060\024\062\025\052\026\047" +
    "\027\050\030\057\031\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\017\120\022\121" +
    "\023\060\024\062\025\052\026\047\027\050\030\057\031" +
    "\055\001\001\000\022\022\115\023\060\024\062\025\052" +
    "\026\047\027\050\030\057\031\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\123\022\121\023\060\024" +
    "\062\025\052\026\047\027\050\030\057\031\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\150\025" +
    "\052\026\047\027\050\030\057\001\001\000\014\024\147" +
    "\025\052\026\047\027\050\030\057\001\001\000\014\024" +
    "\146\025\052\026\047\027\050\030\057\001\001\000\014" +
    "\024\145\025\052\026\047\027\050\030\057\001\001\000" +
    "\012\025\144\026\047\027\050\030\057\001\001\000\014" +
    "\024\143\025\052\026\047\027\050\030\057\001\001\000" +
    "\014\024\142\025\052\026\047\027\050\030\057\001\001" +
    "\000\012\025\135\026\047\027\050\030\057\001\001\000" +
    "\002\001\001\000\010\026\141\027\050\030\057\001\001" +
    "\000\010\026\140\027\050\030\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\274\013\040\016\042" +
    "\001\001\000\004\031\256\001\001\000\022\022\254\023" +
    "\060\024\062\025\052\026\047\027\050\030\057\031\055" +
    "\001\001\000\002\001\001\000\004\031\242\001\001\000" +
    "\010\014\241\015\164\030\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\022\201\023\060\024\062\025\052" +
    "\026\047\027\050\030\057\031\055\001\001\000\002\001" +
    "\001\000\024\021\205\022\206\023\060\024\062\025\052" +
    "\026\047\027\050\030\057\031\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\021\210\022\206\023\060\024\062\025\052\026" +
    "\047\027\050\030\057\031\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\224\022\121\023\060\024\062\025\052\026\047\027\050" +
    "\030\057\031\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\232\001\001\000\006\015" +
    "\237\030\162\001\001\000\022\022\234\023\060\024\062" +
    "\025\052\026\047\027\050\030\057\031\055\001\001\000" +
    "\002\001\001\000\006\015\236\030\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\247\030\162\001\001\000\022\022\244" +
    "\023\060\024\062\025\052\026\047\027\050\030\057\031" +
    "\055\001\001\000\002\001\001\000\006\015\246\030\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\251\023\060\024\062\025\052\026\047\027\050\030\057" +
    "\031\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\267\015\164\030\162\001\001\000\022\022\260\023" +
    "\060\024\062\025\052\026\047\027\050\030\057\031\055" +
    "\001\001\000\002\001\001\000\010\014\262\015\164\030" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\265\015\164\030\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\272\015\164\030\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\275\015\164\030\162\001\001" +
    "\000\002\001\001\000\004\007\277\001\001\000\002\001" +
    "\001\000\004\030\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\307\030\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\313\030" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\321\013\040\016\042\001\001\000\010\014\322\015\164" +
    "\030\162\001\001\000\002\001\001\000\004\007\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\330\012\031\016\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\333\013\040\016\042" +
    "\001\001\000\010\014\334\015\164\030\162\001\001\000" +
    "\002\001\001\000\004\007\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\341\013\040\016\042\001" +
    "\001\000\010\014\342\015\164\030\162\001\001\000\002" +
    "\001\001\000\004\007\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\022\350\023\060" +
    "\024\062\025\052\026\047\027\050\030\057\031\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),
			null);
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Name ::= IDENTIFIER LBRACKET Expr RBRACKET 
            {
              nameNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new nameNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            e, id.linenum,id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Name ::= IDENTIFIER 
            {
              nameNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new nameNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            exprNode.NULL, id.linenum,id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Unit ::= LPAREN Expr RPAREN 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new unaryOpNode(-1, e, l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new falseNode(l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new trueNode(l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken l = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new strLitNode(l.stringText, l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Unit ::= FLOATLIT 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXFloatLitToken l = (CSXFloatLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new floatLitNode(l.floatValue, l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXCharLitToken l = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new charLitNode(l.charValue, l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Unit ::= INTLIT 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIntLitToken l = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new intLitNode(l.intValue, l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Unit ::= IDENTIFIER LPAREN Args RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new fctCallNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            a, id.linenum, id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Unit ::= IDENTIFIER LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new fctCallNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            argsNode.NULL, id.linenum, id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Unit ::= Name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new unaryOpNode(-1, n, n.linenum, n.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Unary ::= Unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new unaryOpNode(-1, u, u.linenum, u.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Unary ::= LPAREN Type RPAREN Unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new castNode(t, u, l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Unary ::= NOT Unary 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken n = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new unaryOpNode(sym.NOT, u, n.linenum, n.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Pri ::= Unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new unaryOpNode(-1, u, u.linenum, u.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Pri ::= Pri SLASH Unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(p, sym.SLASH, u, p.linenum, p.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Pri ::= Pri TIMES Unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(p, sym.TIMES, u, p.linenum, p.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Factor ::= Pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new unaryOpNode(-1, p, p.linenum, p.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Factor ::= Factor MINUS Pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(f, sym.MINUS, p, f.linenum, f.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Factor ::= Factor PLUS Pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(f, sym.PLUS, p, f.linenum, f.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Term ::= Factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new unaryOpNode(-1, f1, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Term ::= Factor NOTEQ Factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(f1, sym.NOTEQ, f2, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Term ::= Factor EQ Factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(f1, sym.EQ, f2, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Term ::= Factor GEQ Factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(f1, sym.GEQ, f2, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Term ::= Factor LEQ Factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(f1, sym.LEQ, f2, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Term ::= Factor GT Factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new binaryOpNode(f1, sym.GT, f2, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Term ::= Factor LT Factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new binaryOpNode(f1, sym.LT, f2, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CondExpr ::= LPAREN Expr CONDEXPR Expr MINUSCOLON Expr PLUSCOLON Expr RPAREN 
            {
              condExprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		exprNode e1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		exprNode e2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exprNode e3 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e4 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new condExprNode(e1, e2, e3, e4, l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*CondExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= CondExpr 
            {
              exprNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		condExprNode c = (condExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= c;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new unaryOpNode(-1, t, t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr CAND Term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(e, sym.CAND, t, e.linenum, e.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr COR Term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new binaryOpNode(e, sym.COR, t, e.linenum, e.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Printlist ::= Expr 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new printNode(e, printNode.NULL, e.linenum, e.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Printlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Printlist ::= Expr COMMA Printlist 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		printNode pl = (printNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new printNode(e, pl,  e.linenum, e.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Printlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Readlist ::= Name 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new readNode(n, readNode.NULL, n.linenum, n.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Readlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Readlist ::= Name COMMA Readlist 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		readNode r = (readNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new readNode(n, r, n.linenum, n.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Readlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Args ::= Expr 
            {
              argsNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new argsNode(e, argsNode.NULL, e.linenum, e.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Args ::= Expr COMMA Args 
            {
              argsNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new argsNode(e, a, e.linenum, e.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new boolTypeNode(t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= rw_FLOAT 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new floatTypeNode(t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new charTypeNode(t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Type ::= rw_INT 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new intTypeNode(t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stmt ::= IDENTIFIER DEC SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new postDecrementNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            id.linenum, id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stmt ::= DEC IDENTIFIER SEMI 
            {
              stmtNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken d = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new preDecrementNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            d.linenum, d.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stmt ::= IDENTIFIER INC SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new postIncrementNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            id.linenum, id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stmt ::= INC IDENTIFIER SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new preIncrementNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            i.linenum, i.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stmt ::= LBRACE Fielddecls Stmts RBRACE OptionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new blockNode(f, s,l.linenum, l.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stmt ::= rw_CONTINUE IDENTIFIER SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new continueNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            c.linenum, c.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stmt ::= rw_BREAK IDENTIFIER SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new breakNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            b.linenum, b.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stmt ::= rw_RETURN Expr SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new returnNode(e, r.linenum, r.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new returnNode(exprNode.NULL, r.linenum, r.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stmt ::= IDENTIFIER LPAREN Args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new callNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            a, id.linenum, id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stmt ::= IDENTIFIER LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        RESULT= new callNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            argsNode.NULL, id.linenum, id.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stmt ::= rw_PRINT LPAREN Expr COMMA Printlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		CSXToken p = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		printNode pl = (printNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new printNode(e, pl, p.linenum, p.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stmt ::= rw_PRINT LPAREN Expr RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken p = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new printNode(e, printNode.NULL, p.linenum, p.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stmt ::= rw_READ LPAREN Name RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new readNode(n, readNode.NULL, r.linenum, r.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stmt ::= rw_READ LPAREN Name COMMA Readlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		readNode rl = (readNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new readNode(n, rl, r.linenum, r.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= Name ASG Expr SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new asgNode(n, e, n.linenum, n.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= IDENTIFIER COLON rw_WHILE CondExpr Stmt 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		condExprNode c = (condExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new whileCondExprNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            c, s, w.linenum, w.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= IDENTIFIER COLON rw_WHILE LPAREN Expr RPAREN Stmt 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new whileNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            e, s, w.linenum, w.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmt ::= rw_WHILE CondExpr Stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		condExprNode c = (condExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new whileCondExprNode(exprNode.NULL, c, s, w.linenum, w.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= rw_WHILE LPAREN Expr RPAREN Stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new whileNode(exprNode.NULL, e, s, w.linenum, w.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stmt ::= rw_IF LPAREN Expr RPAREN Stmts rw_ELSE Stmts ENDIF 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		stmtsNode s1 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtsNode s2 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new ifThenNode(e, s1, s2, i.linenum,  i.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stmt ::= rw_IF CondExpr Stmts rw_ELSE Stmts ENDIF 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		condExprNode c = (condExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		stmtsNode s1 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtsNode s2 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new ifCondExprNode(c, s1, s2, i.linenum,  i.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= rw_IF LPAREN Expr RPAREN Stmts ENDIF 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new ifThenNode(e, s, stmtsNode.NULL, i.linenum, i.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= rw_IF CondExpr Stmts ENDIF 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		condExprNode c = (condExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new ifCondExprNode(c, s, stmtsNode.NULL, i.linenum, i.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmts ::= Stmt 
            {
              stmtsNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new stmtsNode(s, stmtsNode.NULL, s.linenum, s.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmts ::= Stmt Stmts 
            {
              stmtsNode RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtsNode s2 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new stmtsNode(s1, s2, s1.linenum, s1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Fielddecl ::= rw_CONST IDENTIFIER ASG Expr SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new constDeclNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                             e, c.linenum, c.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Fielddecl ::= Type IDENTIFIER LBRACKET INTLIT RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new arrayDeclNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            t,
                            new intLitNode(i.intValue, t.linenum, t.colnum),
                            t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Fielddecl ::= Type IDENTIFIER ASG Expr SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new varDeclNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            t, e, t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Fielddecl ::= Type IDENTIFIER SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new varDeclNode(new identNode(id.identifierText, id.linenum,id.colnum),
                            t, exprNode.NULL, t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Argdecl ::= Type IDENTIFIER LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new arrayArgDeclNode(
                            new identNode(id.identifierText, id.linenum, id.colnum),
                            t, t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Argdecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Argdecl ::= Type IDENTIFIER 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new valArgDeclNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            t, t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Argdecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Argdecls ::= Argdecl 
            {
              argDeclsNode RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new argDeclsNode(a, argDeclsNode.NULL, a.linenum, a.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Argdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Argdecls ::= Argdecl COMMA Argdecls 
            {
              argDeclsNode RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argDeclNode a1 = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclsNode a2 = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new argDeclsNode(a1, a2, a1.linenum, a1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Argdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Methoddecl ::= Type IDENTIFIER LPAREN Argdecls RPAREN LBRACE Fielddecls Stmts RBRACE OptionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		argDeclsNode a = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new methodDeclNode(
                            new identNode(id.identifierText, id.linenum, id.colnum),
                            a, t, f, s, t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Methoddecl ::= Type IDENTIFIER LPAREN RPAREN LBRACE Fielddecls Stmts RBRACE OptionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new methodDeclNode(
                            new identNode(id.identifierText, id.linenum, id.colnum),
                            argDeclsNode.NULL, t, f, s, t.linenum, t.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Methoddecl ::= rw_VOID IDENTIFIER LPAREN Argdecls RPAREN LBRACE Fielddecls Stmts RBRACE OptionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		argDeclsNode a = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new methodDeclNode(
                            new identNode(id.identifierText, id.linenum, id.colnum), a,
                            new voidTypeNode(v.linenum, v.colnum), f, s, v.linenum, v.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Methoddecl ::= rw_VOID IDENTIFIER LPAREN RPAREN LBRACE Fielddecls Stmts RBRACE OptionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT= new methodDeclNode(
                            new identNode(id.identifierText, id.linenum, id.colnum),
                            argDeclsNode.NULL,
                            new voidTypeNode(v.linenum, v.colnum),
                            f, s, v.linenum, v.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OptionalSemi ::= 
            {
              semicolonNode RESULT = null;
		
                        RESULT= semicolonNode.NULL;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*OptionalSemi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OptionalSemi ::= SEMI 
            {
              semicolonNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT= new semicolonNode(s.linenum, s.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*OptionalSemi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Methoddecls ::= 
            {
              methodDeclsNode RESULT = null;
		
                        RESULT= methodDeclsNode.NULL;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Methoddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Methoddecls ::= Methoddecl Methoddecls 
            {
              methodDeclsNode RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		methodDeclNode m1 = (methodDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode m2 = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new methodDeclsNode(m1, m2, m1.linenum, m1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Methoddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Fielddecls ::= 
            {
              fieldDeclsNode RESULT = null;
		
                        RESULT= fieldDeclsNode.NULL;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Fielddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Fielddecls ::= Fielddecl Fielddecls 
            {
              fieldDeclsNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declNode f1 = (declNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		fieldDeclsNode f2 = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new fieldDeclsNode(f1, f2, f1.linenum, f1.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Fielddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Memberdecls ::= Methoddecls 
            {
              memberDeclsNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode m = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new memberDeclsNode(fieldDeclsNode.NULL, m, m.linenum, m.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Memberdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Memberdecls ::= Fielddecl Memberdecls 
            {
              memberDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT= new memberDeclsNode(
                            new fieldDeclsNode(f, m.fields, f.linenum,f.colnum),
                            m.methods, f.linenum, f.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Memberdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= rw_CLASS IDENTIFIER LBRACE Memberdecls RBRACE 
            {
              classNode RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken cl = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT= new classNode(
                            new identNode(id.identifierText, id.linenum,id.colnum),
                            m, cl.linenum, cl.colnum);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		classNode start_val = (classNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

